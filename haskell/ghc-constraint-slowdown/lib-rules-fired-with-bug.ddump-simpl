Rule fired: Class op show (BUILTIN)
Rule fired: Class op cfoldl (BUILTIN)
Rule fired: Class op + (BUILTIN)
Rule fired: plusFloat# (BUILTIN)

==================== Specialise ====================
Result size of Specialise
  = {terms: 44, types: 34, coercions: 3, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s3ty :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s3ty = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s3tz :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s3tz = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s3ty

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s3tA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_s3tA = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s3tB :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
$trModule_s3tB = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s3tA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s3tz $trModule_s3tB

-- RHS size: {terms: 19, types: 13, coercions: 0, joins: 0/0}
main_s3yV :: String
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 142 0}]
main_s3yV
  = GHC.Float.$fShowFloat_$sshowSignedFloat
      GHC.Float.$fShowFloat2
      GHC.Float.$fRealFracFloat3
      (case Algebra.Linear.V3.$WV3f
              (ghc-prim-0.5.3:GHC.Types.F# 1.0#)
              (ghc-prim-0.5.3:GHC.Types.F# 2.0#)
              (ghc-prim-0.5.3:GHC.Types.F# 3.0#)
       of
       { V3f co_a3yy dt_a3yz dt1_a3yA dt2_a3yB ->
       ghc-prim-0.5.3:GHC.Types.F#
         (ghc-prim-0.5.3:GHC.Prim.plusFloat#
            (ghc-prim-0.5.3:GHC.Prim.plusFloat# dt_a3yz dt1_a3yA) dt2_a3yB)
       })
      (ghc-prim-0.5.3:GHC.Types.[] @ Char)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 60}]
main
  = GHC.IO.Handle.Text.hPutStr'
      GHC.IO.Handle.FD.stdout main_s3yV ghc-prim-0.5.3:GHC.Types.True

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s4r9
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
main_s4r9 = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
:Main.main
  = main_s4r9
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



Rule fired: plusFloat# (BUILTIN)
Rule fired: plusFloat# (BUILTIN)

==================== SpecConstr ====================
Result size of SpecConstr
  = {terms: 32, types: 23, coercions: 3, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s3ty :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s3ty = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s3tz :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s3tz = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s3ty

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_s3tA :: ghc-prim-0.5.3:GHC.Prim.Addr#
[LclId]
$trModule_s3tA = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_s3tB :: ghc-prim-0.5.3:GHC.Types.TrName
[LclId, Str=m1]
$trModule_s3tB = ghc-prim-0.5.3:GHC.Types.TrNameS $trModule_s3tA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: ghc-prim-0.5.3:GHC.Types.Module
[LclIdX, Str=m]
Main.$trModule
  = ghc-prim-0.5.3:GHC.Types.Module $trModule_s3tz $trModule_s3tB

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl_s4rM :: ShowS
[LclId]
lvl_s4rM
  = GHC.Float.$w$sshowSignedFloat1
      GHC.Float.$fShowFloat2 GHC.Float.$fRealFracFloat3 6.0#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s3yV :: String
[LclId]
main_s3yV = lvl_s4rM (ghc-prim-0.5.3:GHC.Types.[] @ Char)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
main :: IO ()
[LclIdX, Arity=1]
main
  = GHC.IO.Handle.Text.hPutStr'
      GHC.IO.Handle.FD.stdout main_s3yV ghc-prim-0.5.3:GHC.Types.True

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
main_s4r9
  :: ghc-prim-0.5.3:GHC.Prim.State# ghc-prim-0.5.3:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.3:GHC.Prim.State#
             ghc-prim-0.5.3:GHC.Prim.RealWorld,
           () #)
[LclId, Arity=1]
main_s4r9 = GHC.TopHandler.runMainIO1 @ () main

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[LclIdX,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= main_s4r9
               `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
                       :: (ghc-prim-0.5.3:GHC.Prim.State#
                             ghc-prim-0.5.3:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.5.3:GHC.Prim.State#
                                   ghc-prim-0.5.3:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main
  = main_s4r9
    `cast` (Sym (ghc-prim-0.5.3:GHC.Types.N:IO[0] <()>_R)
            :: (ghc-prim-0.5.3:GHC.Prim.State#
                  ghc-prim-0.5.3:GHC.Prim.RealWorld
                -> (# ghc-prim-0.5.3:GHC.Prim.State#
                        ghc-prim-0.5.3:GHC.Prim.RealWorld,
                      () #))
               ~R# IO ())



